generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id        String    @id @default(uuid())
  userId    String    @unique
  name      String
  imageUrl  String    @db.Text()
  email     String    @db.VarChar(64)
  createdAt DateTime  @default(now())
  servers   Server[]
  members   Member[]
  channels  Channel[]
}

model Server {
  id       String @id @default(uuid())
  name     String
  imageUrl String @db.Text()

  inviteCode String    @unique
  profileId  String
  profile    Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  members    Member[]
  channels   Channel[]

  @@index([profileId(length: 10)])
}

enum MemberRole {
  ADMIN
  MODERATION
  GUEST
}

model Member {
  id             String          @id @default(uuid())
  role           MemberRole      @default(GUEST)
  profileId      String
  profile        Profile         @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId       String
  server         Server          @relation(fields: [serverId], references: [id], onDelete: Cascade)
  createdAt      DateTime        @default(now())
  messages       Message[]
  directMessages DirectMessage[]

  conversationInitiated Conversation[] @relation("InitiatedConversations")
  conversationReceived  Conversation[] @relation("ReceivedConversations")

  @@index([profileId(length: 10)])
  @@index([serverId(length: 10)])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id        String      @id @default(uuid())
  name      String
  type      ChannelType @default(TEXT)
  serverId  String
  server    Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)
  profileId String
  profile   Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  messages  Message[]

  @@index([profileId(length: 10)])
  @@index([serverId(length: 10)])
}

model Message {
  id        String   @id @default(uuid())
  content   String   @db.VarChar(64)
  fileUrl   String?  @db.VarChar(255)
  memberId  String
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channelId String
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  @@index([memberId(length: 10)])
  @@index([channelId(length: 10)])
}

model Conversation {
  id             String          @id @default(uuid())
  memberOneId    String
  MemberOne      Member          @relation("InitiatedConversations", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwoId    String
  MemberTwo      Member          @relation("ReceivedConversations", fields: [memberTwoId], references: [id], onDelete: Cascade)
  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId(length: 10)])
  @@index([memberTwoId(length: 10)])
}

model DirectMessage {
  id      String  @id @default(uuid())
  content String  @db.VarChar(64)
  fileUrl String? @db.VarChar(64)

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  @@index([memberId(length: 10)])
  @@index([conversationId(length: 10)])
}
